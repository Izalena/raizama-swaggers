openapi: '3.0.2'
info:
  title: Raizama User
  version: 1.0.0
  description: |
    # Overview
    All users sollutions for Raizama project.
    # Change history
    | Revision | API Version | Status | Author | Description | Date |
    | --- | --- | --- | --- | --- | --- |
    | 1 | v1 | draft | Izalena Barbosa | Initial draft | 18/05/2020 |
paths:
  /createUser:
    post:
      security:
        - System: []
      summary: 'Add a new user'
      tags:
        - users
      description: |
        Use this operation to add new user to Raizama database
      parameters:
        - name: X-Correlation-Id
          in: header
          schema:
            $ref: '#/components/schemas/correlation-id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-minimal-object'
      responses:
        '201':
          description: 'Added user'
          headers:
            X-Correlation-Id:
              $ref: '#/components/headers/X-Correlation-Id'
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-object'
        '400':
          $ref: '#/components/responses/400-error-response'
        '401':
          $ref: '#/components/responses/401-error-response'
        '404':
          $ref: '#/components/responses/404-error-response'
        '500':
          $ref: '#/components/responses/500-error-response'

  /user/{user-id}:
    get:
      security:
        - System: []
        - Access: []
      summary: 'Retrieve a user'
      tags:
        - users
      description: |
        Use this operation to retreive the information of a user
      parameters:
        - name: user-id
          in: path
          schema:
            $ref: '#/components/schemas/user-id'
          required: true
        - name: X-User-Authorization
          in: header
          description: The user Access Token
          required: true
          schema:
            $ref: '#/components/schemas/user-autorization'
        - name: X-Correlation-Id
          in: header
          schema:
            $ref: '#/components/schemas/correlation-id'
      responses:
        '200':
          description: 'The requested user'
          headers:
            X-Correlation-Id:
              $ref: '#/components/headers/X-Correlation-Id'
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-object'
        '400':
          $ref: '#/components/responses/400-error-response'
        '401':
          $ref: '#/components/responses/401-error-response'
        '404':
          $ref: '#/components/responses/404-error-response'
        '500':
          $ref: '#/components/responses/500-error-response'
    put:
      security:
        - System: []
        - Access: []
      summary: 'Update a user'
      tags:
        - users
      description: |
        Use this operation to update the information of a user
      parameters:
        - name: user-id
          in: path
          schema:
            $ref: '#/components/schemas/user-id'
          required: true
        - name: X-User-Authorization
          in: header
          description: The user Access Token
          required: true
          schema:
            $ref: '#/components/schemas/user-autorization'
        - name: X-Correlation-Id
          in: header
          schema:
            $ref: '#/components/schemas/correlation-id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-minimal-object'
      responses:
        '200':
          description: 'The requested user'
          headers:
            X-Correlation-Id:
              $ref: '#/components/headers/X-Correlation-Id'
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-object'
        '400':
          $ref: '#/components/responses/400-error-response'
        '401':
          $ref: '#/components/responses/401-error-response'
        '404':
          $ref: '#/components/responses/404-error-response'
        '500':
          $ref: '#/components/responses/500-error-response'
  
    delete:
      security:
        - System: []
        - Access: []
      summary: 'Delete a user'
      tags:
        - users
      description: |
        Use this operation to delete the information of a user
      parameters:
        - name: user-id
          in: path
          schema:
            $ref: '#/components/schemas/user-id'
          required: true
        - name: X-User-Authorization
          in: header
          description: The user Access Token
          required: true
          schema:
            $ref: '#/components/schemas/user-autorization'
        - name: X-Correlation-Id
          in: header
          schema:
            $ref: '#/components/schemas/correlation-id'
      responses:
        '201':
          description: 'Deleted user'
          headers:
            X-Correlation-Id:
              $ref: '#/components/headers/X-Correlation-Id'
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-object'
        '400':
          $ref: '#/components/responses/400-error-response'
        '401':
          $ref: '#/components/responses/401-error-response'
        '404':
          $ref: '#/components/responses/404-error-response'
        '500':
          $ref: '#/components/responses/500-error-response'
      x-scopes:
        - bank:accounts.detail:delete
      x-version: "1"

  

  /healthcheck:
    get:
      summary: Checks the microservices health
      tags:
        - metadata
      responses:
        '200':
          description: 'The microservice is up and running'
          content:
            application/json:
              example:
                {
                  status: UP
                }

  /info:
    get:
      summary: Checks the microservices information
      tags:
        - metadata
      responses:
        '200':
          description: 'The microservice informations'
          content:
            application/json:
              example:
                {
                  "build": {
                    "version": "1.0.0",
                    "artifact": "user-ms-raizama",
                    "name": "User Microservice",
                    "group": "com.raizama.{{username}}.microservices",
                    "time": "2020-05-18T18:46:26.143Z"
                  }
                }

components:
  responses:
    400-error-response:
      description: Bad Request
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-response'
          example:
            {
              "error_code": "E_CST_400",
              "description": "Missing required request parameters"
            }
    401-error-response:
      description: Unauthorized
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-response'
          example:
            {
              "error_code": "E_CST_401",
              "description": "Invalid System Token in request"
            }
    404-error-response:
      description: Not Found
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-response'
          example:
            {
              "error_code": "E_CST_404",
              "description": "Resource Not Found"
            }
    500-error-response:
      description: Internal Server Error
      headers:
        X-Correlation-Id:
          $ref: '#/components/headers/X-Correlation-Id'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-response'
          example:
            {
              "error_code": "E_CST_500",
              "description": "An Internal Server Error occurred"
            }

  schemas:
    ## User
    user-minimal-object:
      type: object
      description: The object representing the user
      required:
        - id
        - Dob
        - Username
        - Password
        - Email
        - Country
        - State
        - City
        - Image
        - Type
      properties:
        id:
          $ref: '#/components/schemas/user-id'  
        dob:
          $ref: '#/components/schemas/user-dob'  
        username:
          $ref: '#/components/schemas/user-username'
        password:
          $ref: '#/components/schemas/user-password'
        email:
          $ref: '#/components/schemas/user-email'   
        country:
          $ref: '#/components/schemas/user-country'
        state:
          $ref: '#/components/schemas/user-state'
        city:
          $ref: '#/components/schemas/user-city'
        image:
          $ref: '#/components/schemas/user-image'
        type:
          $ref: '#/components/schemas/user-type'         
    user-object:
      type: object
      description: The object representing the user
      required:
        - id
        - Dob
        - Username
        - Password
        - Email
        - Country
        - State
        - City
        - Image
        - Type
      properties:
        id:
          $ref: '#/components/schemas/user-id'  
        dob:
          $ref: '#/components/schemas/user-dob'  
        username:
          $ref: '#/components/schemas/user-username'
        password:
          $ref: '#/components/schemas/user-password'
        email:
          $ref: '#/components/schemas/user-email'   
        country:
          $ref: '#/components/schemas/user-country'
        state:
          $ref: '#/components/schemas/user-state'
        city:
          $ref: '#/components/schemas/user-city'
        image:
          $ref: '#/components/schemas/user-image'
        type:
          $ref: '#/components/schemas/user-type'   
      allOf:
        - $ref: '#/components/schemas/user-minimal-object'
    user-id:
      type: string
      description: The id of a user
      minLength: 6
      maxLength: 10
      pattern: '^USER[0-9]{7}$'
      example: 'USER0000001'
    user-dob:
      type: string
      description: The date of birth of a user
      format: 'date'
      pattern: 'MM-dd-yyyy'
      example: '12-25-1980'
    user-username:
      type: string
      description: The chosen username
      minLength: 1
      maxLength: 50
      example: 'Izalena'
    user-password:
      type: string
      description: The chosen password
      minLength: 6
      maxLength: 8
      pattern: '^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\]).{8,32}$'
      example: 'saER123!'
    user-email:
      type: string
      description: The email of a user
      example: izalena@email.com
    user-country:
      type: string
      description: The country of a user
      example: Brazil
    user-state:
      type: string
      description: The state of a user
      example: Rio de Janeiro
    user-city:
      type: string
      description: The city of a user
      example: niteroi
    user-image:
      type: string
      description: The image of a user
      format: binary
      example: IMG213.png
    user-type:
      type: string
      description: The type of a user
      enum:
        - client
        - associate
      example: client

      
    ## ERROR
    error-response:
      type: object
      required:
        - error_code
        - description
      properties:
        error_code:
          type: string
          minLength: 1
          description: Code representing the error e.g. E_PRD_000
        description:
          type: string
          minLength: 1
          description: Description of the error
    correlation-id:
      type: string
      format: uuid
      description: Returns the correlation id received/generated by the API
    request-id:
      type: string
      format: uuid
      description: Returns the request id generated by the API
    user-autorization:
      type: string
      format: bearer jwt
      description: The user Access Token

  headers:
    X-Correlation-Id:
      schema:
        $ref: '#/components/schemas/correlation-id'
    X-Request-Id:
      schema:
        $ref: '#/components/schemas/request-id'
    X-User-Authorization:
      schema:
        $ref: '#/components/schemas/user-autorization'

  securitySchemes:
    System:
      type: oauth2
      flows:
        password:
          tokenUrl: 'http://localhost:8080/system-token'
    Access:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'http://localhost:8080/access-token'
